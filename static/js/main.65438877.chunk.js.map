{"version":3,"sources":["components/ShowNote.js","actions/index.js","const/index.js","components/AddNote.js","App.js","serviceWorker.js","reducers/noteReducer.js","reducers/index.js","index.js"],"names":["connect","state","ownProps","note","dispatch","editNote","id","content","type","actEditNote","removeNote","actRemoveNote","props","useState","noteData","noteContent","setNoteContent","noteID","className","value","onChange","e","target","onClick","addNote","actAddNote","setContent","noteInput","useRef","placeholder","ref","current","map","index","key","Boolean","window","location","hostname","match","noteReducers","action","generateID","Date","getTime","indexOfEditNote","findIndex","idRemove","filter","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65438877.chunk.js","sourcesContent":["//file: src/components/ShowNote.js\r\nimport React, { useState } from \"react\";\r\nimport \"./ShowNote.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { actEditNote, actRemoveNote } from \"../actions/index\";\r\n \r\nfunction ShowNote(props) {\r\n  const [noteContent, setNoteContent] = useState(props.noteData.content)\r\n \r\n  //Lấy ID của ghi chú \r\n  const noteID = props.noteData.id\r\n \r\n \r\n  // Được gọi mỗi khi thay đổi giá trị\r\n  // của ghi chú.\r\n  const handleChange = (e) => {\r\n    setNoteContent(e.target.value)\r\n    props.editNote(noteID, e.target.value)\r\n  }\r\n \r\n  //Được gọi khi click vào \r\n  //xóa ghi chú.\r\n  const handleRemoveNote = () => {\r\n    props.removeNote(noteID)\r\n  }\r\n  return (\r\n    <div className='card-display' >\r\n      <div className=\"card bg-warning\">\r\n        <div className=\"card-body\">\r\n          <textarea value= {noteContent} onChange = {handleChange}></textarea>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n  <div className=\"float-left\">ID: {noteID}</div>\r\n          <button className=\"btn btn-danger btn-sm float-right\" onClick={handleRemoveNote}>Delete</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\n// chuyển dispatch thành props\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    editNote: (id, content) => {\r\n      dispatch(actEditNote(id, content));\r\n    },\r\n    removeNote: id => {\r\n      dispatch(actRemoveNote(id));\r\n    }\r\n  };\r\n};\r\n \r\n// chuyển state từ store thành props\r\n// của component\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    note: state.note,\r\n  };\r\n};\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowNote);","import { ADD_NEW_NOTE, REMOVE_NOTE, EDIT_NOTE } from \"../const/index\";\r\n//action thêm note\r\nexport const actAddNote = (content) => {\r\n  return {\r\n    type: ADD_NEW_NOTE,\r\n    content,\r\n  };\r\n};\r\n//Xóa note\r\nexport const actRemoveNote = (id) => {\r\n  return {\r\n    type: REMOVE_NOTE,\r\n    id,\r\n  };\r\n};\r\n//Sửa note\r\nexport const actEditNote = (id, content) => {\r\n  return {\r\n    type: EDIT_NOTE,\r\n    id,\r\n    content,\r\n  };\r\n};","// const/index.js\r\nexport const ADD_NEW_NOTE = \"ADD_NEW_NOTE\";\r\nexport const REMOVE_NOTE = \"REMOVE_NOTE\";\r\nexport const EDIT_NOTE = \"EDIT_NOTE\";","//file AddNote.js\r\n \r\nimport React, { useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//Import actions vào đây\r\nimport { actAddNote } from \"../actions/index\";\r\n \r\nfunction AddNote(props) {\r\n  const [content, setContent] = useState();\r\n \r\n  //Refs: Giúp chúng ta tương tác với DOM thật\r\n \r\n  const noteInput = useRef(null)\r\n \r\n  //Khi click vào nút thêm sẽ gọi hàm này,\r\n  const handleAdd = () => {\r\n \r\n    // Dispatch action.\r\n    // Props này được tạo bởi hàm\r\n    // mapDispatchToProps bên dưới\r\n    props.addNote(content)\r\n \r\n    //Gán giá trị cho input thành rỗng\r\n    noteInput.current.value = ''\r\n \r\n    //Cập nhật lại state content\r\n    setContent('')\r\n  };\r\n   \r\n  return (\r\n      <div className=\"input-group\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Content Note\"\r\n          value =  {content}\r\n          onChange={(e) => {\r\n            setContent(e.target.value)\r\n          }}\r\n          ref={noteInput}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <button className=\"btn btn-primary\" onClick={handleAdd}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n \r\n//Chuyển dispatch thành props.\r\n//Ở đây nếu mình muốn dispatch action actAddNote\r\n//thì chỉ cần gọi props.addNote(content)\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addNote: (content) => {\r\n      dispatch(actAddNote(content));\r\n    },\r\n  };\r\n};\r\nexport default connect(null, mapDispatchToProps)(AddNote);\r\n","//file: src/App.js\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\n//Kết nối vơi redux\r\nimport { connect } from \"react-redux\";\r\nimport ShowNote from './components/ShowNote'\r\nimport AddNote from './components/AddNote'\r\n\r\nfunction App(props) {\r\n  return (\r\n     <div className=\"display-content\">\r\n      \r\n      <AddNote />\r\n      \r\n      <div className=\"card-content\">\r\n        {props.note.map((note, index) => {\r\n            // Render ra lần lượt các ghi chú.\r\n            return <ShowNote noteData = {note} key={note.id}/>\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\n// Lấy state từ store bằng mapStateToProps\r\n// Lúc này state nhận được sẽ gán vào props\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // Gán state nhận về từ store \r\n  // thành props có tên note (props.note)\r\n  return {\r\n    note: state.note,\r\n  };\r\n};\r\n \r\nexport default connect(mapStateToProps, null)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//reducesr/noteReducers.js\r\n \r\n//Import các const\r\nimport { ADD_NEW_NOTE, REMOVE_NOTE, EDIT_NOTE } from \"../const/index\";\r\n \r\nconst noteReducers = (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_NEW_NOTE:\r\n      const generateID = new Date().getTime();\r\n      state = [...state, { id: generateID, content: action.content }];// thêm new note nên dung ...state\r\n      return state;\r\n \r\n    case EDIT_NOTE:\r\n      const indexOfEditNote = state.findIndex((note) => note.id === action.id);// gán id của id note thành id đang thao tác\r\n      if (indexOfEditNote !== -1)\r\n        state[indexOfEditNote].content = action.content;//gán content\r\n      \r\n      return state;\r\n \r\n    case REMOVE_NOTE:\r\n      const idRemove = action.id;\r\n      state = state.filter(note => {\r\n        if (note.id === idRemove) \r\n          return false\r\n        return true\r\n      })\r\n      //trả lại các giá trị id còn lại sauf cái đã bị xóa\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n \r\nexport default noteReducers","//reducers/index.js\r\nimport {combineReducers} from 'redux' \r\n//Ta có thể tạo nhiều reducers như này, \r\n//và gộp nó vào bằng phương thức combineReducers trong redux.\r\nimport noteReducers from './noteReducer'\r\n \r\nexport default combineReducers({\r\n    note: noteReducers\r\n})\r\n//gộp cả 3 phương thức tạo xóa chỉnh sửa thành 1 là note","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\n//Để các component khác có thể tương tác với Store ta cần bọc root component bởi Provider. \n//Ở file src/index.js sẽ chỉnh sửa lại như sau.\n\n//Gọi reducers\nimport reducers from \"./reducers/index\";\n\n//Tạo store từ reducers\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}